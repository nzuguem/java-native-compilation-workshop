name: Build Native Image and Build Container Image

on:
  workflow_call:
    inputs:
      app-name:
        description: Application Name
        required: true
        type: string
      app-path:
        description: Path of Application
        required: true
        type: string
      app-native-image-path:
        description: Folder containing the native image
        required: true
        type: string
      app-native-image-name:
        description: Name for Native Image Generated. Can be a REGEX
        required: true
        type: string
      app-java-builder:
        description: Application Java Builder
        required: true
        type: string



env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BASE: ${{ github.repository_owner }}/${{ inputs.app-name }}

jobs:
  build:
    name: 🏗️ Build Native Image
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.app-path }}
    steps:
      - uses: actions/checkout@v4

      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: 24
          distribution: graalvm
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: true
          native-image-musl: true

      - uses: actions/cache@v4
        name: Maven Cache
        if: inputs.app-java-builder == 'maven'
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - uses: actions/cache@v4
        name: Gradle Cache
        if: inputs.app-java-builder == 'gradle'
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build native Image
        run: |
          make build-native-image-static

      - name: Upload Native Image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app-name }}
          path: ${{ inputs.app-path }}/${{ inputs.app-native-image-path }}/${{ inputs.app-native-image-name }}
          retention-days: 30

      - name: Upload Build Report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app-name }}-html-build-report
          path: ${{ inputs.app-path }}/${{ inputs.app-native-image-path }}/**/*-build-report.html
          retention-days: 30


  container-image:
    name: 🐳 Build Container Image with Native Image
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.app-path }}
    needs:
      - build
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.app-name }}
          path: ${{ inputs.app-path }}/${{ inputs.app-native-image-path }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        continue-on-error: true
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU (for more platforms support)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set lower case owner name
        run: |
          echo "IMAGE_NAME=${IMAGE_NAME_BASE_UP,,}" >> ${GITHUB_ENV}
        env:
          IMAGE_NAME_BASE_UP: ${{ env.IMAGE_NAME_BASE }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.IMAGE_NAME }}
          tags: |
            # branch event
            type=ref,event=branch
            # set latest tag for main branch
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}

      - name: Build and push
        uses: docker/build-push-action@v5
        continue-on-error: true
        with:
          context: ${{ inputs.app-path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          cache-to: type=inline

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name	 }}
          format: cyclonedx-json
          artifact-name: ${{ inputs.app-name }}-image-sbom-cyclonedx-json

      - name: Scan image
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name	 }}
          fail-build: false
          by-cve: true
          output-format: table
          severity-cutoff: critical